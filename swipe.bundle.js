(()=>{"use strict";var t=[{url:"assets/img/chili.png",fondo:" rgb(255,173, 154)",titulo:"Chili",descripcion:"Pimenton, ajos o morrones de diversos tipos. Son utilizados en diversas recetas."},{url:"assets/img/ostras.png",fondo:"rgb(174, 254, 209)",titulo:"Ostras",descripcion:"Poseen un gran valor nutricional y son utilizadas mayormente como acompa√±amiento"},{url:"assets/img/huevos.png",fondo:"rgb(190, 182, 140)",titulo:"huevos",descripcion:"xxxx xxxxx xxxxx xxxxxxx xxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxxx xxxxxxxxxxxxx xxx"},{url:"assets/img/brocoli.png",fondo:"rgb(174, 254, 209)",titulo:"Brocoli",descripcion:"xxxx xxxxx xxxxx xxxxxxx xxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxxx xxxxxxxxxxxxx xxx"}],e=document.getElementById("swipe");function x(){var n=0;e.innerHTML="",0===t.length&&(location.href="http://"+location.host+"/perfil4.html"),t.map((function(x,n){var i=document.createElement("div");i.id=""+n,t.length,i.innerHTML='<div id="'+n+'3"> <div class="img-container"> <div class="img" style="background-image: url('+x.url+');"  alt="'+x.titulo+'"></div> <div class="fondo-img" style="background: '+x.fondo+'"> </div>  </div> <div tabindex="0" id="'+x.titulo+'"> <p class="sr-only"> Preferncias '+t.length+' de 4 <P> <h3 class="ml-05 my-1" >'+x.titulo+'</h3> <p class="ml-05 text-light my-1">'+x.descripcion+"</p> </div> </div>",i.classList.add("swipe-item");var o=10*(n+1),s=-10*n+"px";i.style.setProperty("z-index",o.toString()),i.style.setProperty("top",s),e.appendChild(i),n!==t.length-1&&(i.style.setProperty("transform","scale("+function(e){return 1-.01*(t.length-e)}(n)+")"),document.getElementById(n+"3").setAttribute("aria-hidden","true"));var l=document.getElementById(x.titulo);4!==t.length&&l.focus()}));var i=document.getElementById(""+(t.length-1));i.addEventListener("touchstart",(function(t){n=t.changedTouches[0].clientX})),i.addEventListener("touchend",(function(e){var o=e.changedTouches[0].clientX,s=o-n;console.log(o,s,n),Math.abs(s)<=60||(n>=o?(i.classList.add("salirIzq"),t.splice(-1,1),setTimeout((function(){x()}),1e3)):(i.classList.add("salirDer"),t.splice(-1,1),setTimeout((function(){x()}),1e3)))}))}x();var n=document.getElementById("aceptar"),i=document.getElementById("rechazar"),o=document.getElementById("continuar");n.addEventListener("click",(function(){document.getElementById(""+(t.length-1)).classList.add("salirDer"),t.splice(-1,1),setTimeout((function(){x()}),1e3)})),i.addEventListener("click",(function(){document.getElementById(""+(t.length-1)).classList.add("salirIzq"),t.splice(-1,1),setTimeout((function(){x()}),1e3)})),o.addEventListener("click",(function(){location.href="http://"+location.host+"/perfil4.html"}),!0),document.getElementById("volver").addEventListener("click",(function(){history.back()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,